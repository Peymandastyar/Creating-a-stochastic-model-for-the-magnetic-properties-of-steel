import numpy as np np.set_printoptions(precision=3)
import matplotlib.pyplot as plt
import seaborn as sns sns.set(rc={"figure.dpi":100, "savefig.dpi":300}) sns.set_context("notebook") sns.set_style("ticks")
import scipy
import scipy.stats as st
import urllib.request
import os
 
 url = "https://github.com/PredictiveScienceLab/data-analytics-se/raw/master/lecturebook/data/B_data.csv" 
 download(url)
 
  B_data = np.loadtxt('B_data.csv') 
  fig, ax = plt.subplots() 
  ax.plot(B_data[:5, :].T) 
  ax.set_xlabel(r"Index $j$") 
  ax.set_ylabel(r"$B$ (T)");
  X_data = B_data[:,500]
  fig, ax = plt.subplots()
  ax.hist(X_data, alpha=0.5, density=True) 
  ax.set_xlabel(r"$x$") 
  ax.set_ylabel(r"p(x)");
  mu_500 = X_data.mean() 
  print(f"mu_500 = {mu_500:.2f}")
  sigma2_500 = np.var(X_data) 
  print(f"sigma_500 = {sigma2_500:.2e}")
  sigma_500 = np.sqrt(sigma2_500)
  X = st.norm(loc=mu_500, scale=sigma_500)
  xs = np.linspace(mu_500 - 6 * sigma_500, mu_500 + 6 * sigma_500, 100) fig, ax = plt.subplots(dpi=100)
  ax.hist(X_data, alpha=0.5, density=True, label='Histogram') 
  ax.plot(xs, X.pdf(xs), label='Identified Normal PDF') 
  ax.set_xlabel('$x$')
  ax.set_ylabel('$p(x)$');
  print('p(X >= 1.66T) = {0:1.2f}'.format(1 - X.cdf(1.66)))
  Y_data = B_data[:, 1000]
  fig, ax = plt.subplots() 
  ax.scatter(X_data, Y_data) 
  ax.set_xlabel('$x$') 
  ax.set_ylabel('$y$')
  XY_data = np.hstack([X_data[:, None], Y_data[:, None]])
  mu_XY = np.mean(XY_data, axis=0) 
  print(f"mu_XY = {mu_XY}")
  C_XY = np.cov(XY_data.T)
  B_mu = np.mean(B_data, axis=0)
  B_COV=np.COV(B_data.T)
  B_corr = np.corrcoef(B_data[:,1:].T)
  B = st.multivariate_normal(mean=B_mu, cov=B_cov)
  nugget = 1e-9
# This is the modified covariance matrix
B_cov_w_nugget = B_cov + nugget * np.eye(B_cov.shape[0]) 
# Try building the distribution:
try:
B = st.multivariate_normal(mean=B_mu, cov=B_cov_w_nugget)
print('It worked! Move on.') 
except:
print('It did not work. Increase nugget by 10.')
B_samples = B.rvs(size=10)
fig, ax = plt.subplots(dpi=100) 
ax.plot(B_samples.T, 'r', lw=0.1) 
ax.set_xlabel('Index $j$') 
ax.set_ylabel('$B$ (T)');
    print('It did not work. Increase nugget by 10.')
